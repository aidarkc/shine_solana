use anchor_lang::prelude::*;
use anchor_lang::solana_program::{
    program::invoke_signed,
    system_instruction,
};

const USER_SEED_PREFIX: &str = "u=";

/// –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∑–æ–≤–∞ test_utils
#[derive(Accounts)]
pub struct TestContext<'info> {
    /// –ü–æ–¥–ø–∏—Å–∞–Ω—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è Anchor
    /// CHECK: –¢–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è. –ù–∏–∫–∞–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.
    #[account(signer)]
    pub signer: AccountInfo<'info>,

    /// –ê–∫–∫–∞—É–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
    /// CHECK: –≠—Ç–æ PDA, —á—å—è –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ seeds –∏ signer
    #[account(mut)]
    pub writable_pda: AccountInfo<'info>,

    /// –ê–∫–∫–∞—É–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–∏—Ç–∞—Ç—å
    /// CHECK: –¢–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è. –ù–∏–∫–∞–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.
    pub readonly_pda: AccountInfo<'info>,

    /// –°–∏—Å—Ç–µ–º–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ (–Ω—É–∂–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è)/// 
    /// CHECK: –¢–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è. –ù–∏–∫–∞–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.
    pub system_program: Program<'info, System>,}

/// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
pub fn test(
    ctx: Context<TestContext>,     // –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    extra_pubkey: Pubkey,          // –ø—Ä–æ—Å—Ç–æ –∫–ª—é—á (–Ω–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–π)
    number: u64,                   // —á–∏—Å–ª–æ
    note: String,                  // —Å—Ç—Ä–æ–∫–∞
    str_array: Vec<String>,        // –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª–∏–Ω–Ω—ã
) -> Result<()> {
    // –ü–µ—á–∞—Ç–∞–µ–º –≤—Å—ë –≤ –ª–æ–≥
    msg!("Signer: {:?}", ctx.accounts.signer.key);
    msg!("Writable PDA: {:?}", ctx.accounts.writable_pda.key);
    msg!("Readonly PDA: {:?}", ctx.accounts.readonly_pda.key);
    msg!("Extra pubkey: {:?}", extra_pubkey);
    msg!("Number: {}", number);
    msg!("Note: {}", note);
    msg!("Array length: {}", str_array.len());
    for (i, s) in str_array.iter().enumerate() {
        msg!("str_array[{}] = {}", i, s);
    }

    

// ---  –ü—Ä–∏–º–µ—Ä —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç—É
    
    let raw_bytes = safe_read_pda(&ctx.accounts.readonly_pda);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Å—Å–∏–≤ –Ω–µ –ø—É—Å—Ç–æ–π
    require!(!raw_bytes.is_empty(), ErrorCode::EmptyPdaData);
    msg!("–†–∞–∑–º–µ—Ä —Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {}", raw_bytes.len());

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // –ü—Ä–æ–±—É–µ–º –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
    let user = deserialize_my_user(&*raw_bytes)?;

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // –í—ã–≤–æ–¥–∏–º –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    msg!("‚úÖ –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –ª–æ–≥–∏–Ω: {}", user.login);    
    
    // –ü–µ—á–∞—Ç–∞–µ–º –º–∞—Å—Å–∏–≤ –ø–æ –±–∞–π—Ç–∞–º: [00 2A FF ...]
    let mut output = String::new();
    for (i, byte) in raw_bytes.iter().enumerate() {
        use std::fmt::Write;

        if i % 16 == 0 {
            // –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∞–¥—Ä–µ—Å–æ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            let _ = write!(output, "\n{:04X}: ", i);
        }
        let _ = write!(output, "{:02X} ", byte);
    }
    msg!("üì¶ –î–∞–Ω–Ω—ã–µ PDA:{}", output);


    
    
    
    
    
    
// --- –ø—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ UserStruct –µ–≥–æ –∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏    
    // --- –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç MyUserStruct
    let user_struct = UserStruct {
        user_id: number,                               // –ª—é–±–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        login: note.clone(),                        // –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å note.clone() –∏–ª–∏ —Å—Ç—Ä–æ–∫—É –∏–∑ –º–∞—Å—Å–∏–≤–∞
        pubkey: ctx.accounts.signer.key().clone(),  // –Ω–∞–ø—Ä–∏–º–µ—Ä, signer
    };

    // --- –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –±–∞–π—Ç
     let serialized_bytes = serialize_my_user(&user_struct);



    // ---  –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è PDA –∏ –∑–∞–ø–∏—Å–∏ –≤ –Ω–µ–≥–æ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–∞—Å—Å–∏–≤–∞
    let seed_string = format!("{}{}", USER_SEED_PREFIX, note);
    let seed_bytes = seed_string.as_bytes();

        
    // –ü–æ–∏—Å–∫ PDA
    let seeds: &[&[u8]] = &[seed_bytes];
    let (expected_pda, bump) = Pubkey::find_program_address(seeds, ctx.program_id);
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ PDA
    require!(ctx.accounts.writable_pda.key == &expected_pda, ErrorCode::InvalidPdaAddress);

    // –ü–æ–ª–Ω—ã–µ —Å–∏–¥—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    let full_seeds: &[&[u8]] = &[seed_bytes, &[bump]];

    msg!("serialized_bytes.len() as u64 {}", serialized_bytes.len() as u64);
    // –ó–∞–ø–∏—Å—å
    create_and_write_pda(
        &ctx.accounts.writable_pda,
        &ctx.accounts.signer,
        &ctx.accounts.system_program,
        ctx.program_id,
        full_seeds,
        serialized_bytes.clone(),
        serialized_bytes.len() as u64,
    )?;
    
    
    Ok(())
}







/// —Å–¥–µ—Å—å –∫–æ–¥—ã –≤—Å–µ—Ö –æ—à–∏–±–æ–∫ 

#[error_code]
pub enum ErrorCode {
    #[msg("PDA –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")]
    EmptyPdaData = 6002,

    #[msg("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")]
    UserAlreadyExists = 6003,

    #[msg("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω")]
    InvalidLogin = 6004,

    #[msg("–ù–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç PDA –∞–¥—Ä–µ—Å")]
    InvalidPdaAddress = 6006,

    #[msg("–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")]
    UnsupportedFormat = 7001,

    #[msg("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏")]
    DeserializationError = 7002,

    /// PDA —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ
    #[msg("PDA-–∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ.")]
    PdaAlreadyExists = 1009,

    /// –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ!
    #[msg("–°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ!")]
    SystemAlreadyInitialized = 4000,
}
#[error_code]
pub enum UserDataError {
    #[msg("–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")]
    UnsupportedFormat = 7001,

    #[msg("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏")]
    DeserializationError = 7002,
}

///---------------------------------------------------------------------------------
/// 
///   –°–¢–†–£–ö–¢–£–†–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ï–Å –°–ï–†–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –î–ï–°–ï–†–ò–ê–õ–ò–ó–ê–¶–ò–Ø
/// 
/// --------------------------------------------------------------------------------
 
/// –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
pub struct UserStruct {
    //pub format_type: u32,   // 4 –±–∞–π—Ç–∞        –Ω–µ —Ö—Ä–∞–Ω–∏–º
    pub user_id: u64,       // 8 –±–∞–π—Ç
    pub login: String,      // —Å–Ω–∞—á–∞–ª–∞ –¥–ª–∏–Ω–∞, –ø–æ—Ç–æ–º –±–∞–π—Ç—ã
    pub pubkey: Pubkey,     // 32 –±–∞–π—Ç–∞
}

///    ------------  –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è -----------
// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

// let user_bytes = serialize_my_user(&some_user);
// match deserialize_my_user(&user_bytes) {
// Ok(user) => msg!("–î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω –ª–æ–≥–∏–Ω: {}", user.login),
// Err(e) => msg!("–û—à–∏–±–∫–∞: {}", e),
// }

/// –ú–µ—Ç–æ–¥ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ Vec<u8>
/// let user = MyUserStruct {
///     format_type: 1,
///     user_id: 42,
///     login: String::from("sol_user"),
///     pubkey: Pubkey::new_unique(),
/// };
/// 
/// let bytes = serialize_my_user(&user);
/// msg!("–°–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ {} –±–∞–π—Ç: {:?}", bytes.len(), bytes);
pub fn serialize_my_user(user: &UserStruct) -> Vec<u8> {
    let mut result = Vec::new();

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // 1. format_type (4 –±–∞–π—Ç–∞)
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    result.extend_from_slice(&1u32.to_le_bytes());
    //result.extend_from_slice(&user.format_type.to_le_bytes());  –Ω–µ —Ö—Ä–∞–Ω–∏–º

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // 2. user_id (8 –±–∞–π—Ç)
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    result.extend_from_slice(&user.user_id.to_le_bytes());

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // 3. login: —Å–Ω–∞—á–∞–ª–∞ –¥–ª–∏–Ω–∞ (u8), –∑–∞—Ç–µ–º –±–∞–π—Ç—ã
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    let login_bytes = user.login.as_bytes();
    let login_len = login_bytes.len();

    // –ï—Å–ª–∏ –ª–æ–≥–∏–Ω –¥–ª–∏–Ω–Ω–µ–µ 255 —Å–∏–º–≤–æ–ª–æ–≤ ‚Äî –æ—à–∏–±–∫–∞ (–∏–ª–∏ –æ–±—Ä–µ–∂–µ–º)
    let login_len_u8 = login_len.min(255) as u8;

    result.push(login_len_u8); // –¥–ª–∏–Ω–∞
    result.extend_from_slice(&login_bytes[..login_len_u8 as usize]); // —Å—Ç—Ä–æ–∫–∞

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // 4. Pubkey (32 –±–∞–π—Ç–∞)
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    result.extend_from_slice(user.pubkey.as_ref());

    result
}
///    ------------  –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è -----------

/// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω—É–∂–Ω—É—é –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é
pub fn deserialize_my_user(data: &[u8]) -> Result<UserStruct> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –±–∞–π—Ç–∞—Ö —Ö–æ—Ç—è –±—ã 4 –±–∞–π—Ç–∞ –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç
    if data.len() < 4 {
        return Err(error!(UserDataError::DeserializationError));
    }

    // –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 4 –±–∞–π—Ç–∞ ‚Äî —Ç–∏–ø —Ñ–æ—Ä–º–∞—Ç–∞
    let format_type = u32::from_le_bytes(data[0..4].try_into().map_err(|_| UserDataError::DeserializationError)?);

    // –í–µ—Ç–≤–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É —Ñ–æ—Ä–º–∞—Ç–∞
    match format_type {
        1 => deserialize_format_1(data),
        // 2 => deserialize_format_2(data),
        // 3 => ...
        _ => Err(error!(UserDataError::UnsupportedFormat)),
    }
}

/// –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞ 1:
/// [0..4]  ‚Üí format_type: u32
/// [4..12] ‚Üí user_id: u64
/// [12..13] ‚Üí –¥–ª–∏–Ω–∞ –ª–æ–≥–∏–Ω–∞: u8
/// [13..(13+len)] ‚Üí –ª–æ–≥–∏–Ω
/// [..] ‚Üí 32 –±–∞–π—Ç–∞ pubkey
pub fn deserialize_format_1(data: &[u8]) -> Result<UserStruct> {
    // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å—ë –≤ –æ–¥–Ω—É try-–±–ª–æ–∫, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å –ª—é–±—ã–µ –æ—à–∏–±–∫–∏
    let result = (|| {
        if data.len() < 4 + 8 + 1 + 32 {
            return Err(UserDataError::DeserializationError);
        }

        //let format_type = u32::from_le_bytes(data[0..4].try_into().unwrap());  –Ω–µ —Ö—Ä–∞–Ω–∏–º
        let user_id = u64::from_le_bytes(data[4..12].try_into().unwrap());

        let login_len = data[12] as usize;
        let login_start = 13;
        let login_end = login_start + login_len;

        if data.len() < login_end + 32 {
            return Err(UserDataError::DeserializationError);
        }

        let login_bytes = &data[login_start..login_end];
        let login = std::str::from_utf8(login_bytes)
            .map_err(|_| UserDataError::DeserializationError)?
            .to_string();

        let pubkey_start = login_end;
        let pubkey_end = pubkey_start + 32;
        let pubkey = Pubkey::try_from(&data[pubkey_start..pubkey_end])
            .map_err(|_| UserDataError::DeserializationError)?;


        Ok(UserStruct {
            user_id,
            login,
            pubkey,
        })
    })();

    // –û–±–µ—Ä–Ω—ë–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ª—é–±–∞—è –∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–π —É–ø–∞–ª–∞
    result.map_err(|_| error!(UserDataError::DeserializationError))
}










/// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
///  –°—Ç—Ä—É–∫—Ç—É—Ä–∞ UserByLogin
/// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
///
/// –°–æ–¥–µ—Ä–∂–∏—Ç:
/// - login: String               ‚Äî —Å—Ç—Ä–æ–∫–∞ (–¥–æ 255 –±–∞–π—Ç, —Ö—Ä–∞–Ω–∏–º –¥–ª–∏–Ω—É + —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ)
/// - id: u64                     ‚Äî 8 –±–∞–π—Ç (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)
/// - pubkey: Pubkey             ‚Äî 32 –±–∞–π—Ç–∞
/// - status: u32                ‚Äî 4 –±–∞–π—Ç–∞
///
/// –§–æ—Ä–º–∞—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:
/// [0..4]      = format_type: u32 (–≤—Å–µ–≥–¥–∞ 1)
/// [4..5]      = –¥–ª–∏–Ω–∞ –ª–æ–≥–∏–Ω–∞: u8
/// [5..(5+len)] = –ª–æ–≥–∏–Ω
/// [...]       = id: u64
/// [...]       = pubkey: [u8; 32]
/// [...]       = status: u32
/// –í—Å–µ–≥–æ: 4 + 1 + –ª–æ–≥–∏–Ω + 8 + 32 + 4 –±–∞–π—Ç–∞
/// ------------------------------------------------------------------------

pub struct UserByLogin {
    pub login: String,    // –ª–æ–≥–∏–Ω (—Å—Ç—Ä–æ–∫–∞)
    pub id: u64,          // —á–∏—Å–ª–æ–≤–æ–π ID
    pub pubkey: Pubkey,   // –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á
    pub status: u32,      // —Å—Ç–∞—Ç—É—Å
}

/// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
/// üîß –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è serialize_user_by_login()
/// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
///
/// –°–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç `UserByLogin` –≤ `Vec<u8>`, –Ω–∞—á–∏–Ω–∞—è —Å format_type = 1
pub fn serialize_user_by_login(user: &UserByLogin) -> Vec<u8> {
    let mut result = Vec::new();

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // 1. format_type (4 –±–∞–π—Ç–∞)
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    result.extend_from_slice(&1u32.to_le_bytes()); // —Ñ–æ—Ä–º–∞—Ç 1

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // 2. login: –¥–ª–∏–Ω–∞ (u8) + –±–∞–π—Ç—ã
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    let login_bytes = user.login.as_bytes();
    let login_len = login_bytes.len();
    let login_len_u8 = login_len.min(255) as u8; // –º–∞–∫—Å–∏–º—É–º 255 –±–∞–π—Ç

    result.push(login_len_u8); // –¥–ª–∏–Ω–∞
    result.extend_from_slice(&login_bytes[..login_len_u8 as usize]);

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // 3. id (u64)
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    result.extend_from_slice(&user.id.to_le_bytes());

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // 4. pubkey (32 –±–∞–π—Ç–∞)
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    result.extend_from_slice(user.pubkey.as_ref());

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // 5. status (4 –±–∞–π—Ç–∞)
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    result.extend_from_slice(&user.status.to_le_bytes());

    result
}

/// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
///üîÑ –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è deserialize_user_by_login()
/// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
///
/// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
pub fn deserialize_user_by_login(data: &[u8]) -> Result<UserByLogin> {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if data.len() < 4 {
        return Err(error!(UserDataError::DeserializationError));
    }

    // –°—á–∏—Ç—ã–≤–∞–µ–º format_type
    let format_type = u32::from_le_bytes(data[0..4].try_into().unwrap());

    match format_type {
        1 => deserialize_user_by_login_format1(data),
        _ => Err(error!(UserDataError::UnsupportedFormat)),
    }
}

/// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
/// –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º user_by_login —Ñ–æ—Ä–º–∞—Ç 1:
/// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
fn deserialize_user_by_login_format1(data: &[u8]) -> Result<UserByLogin> {
    let mut offset = 4; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º format_type

    // 1. login (–¥–ª–∏–Ω–∞ + —Å—Ç—Ä–æ–∫–∞)
    let login_len = data.get(offset).ok_or(UserDataError::DeserializationError)? as &u8;
    offset += 1;

    let login_end = offset + (*login_len as usize);
    if data.len() < login_end {
        return Err(error!(UserDataError::DeserializationError));
    }

    let login = std::str::from_utf8(&data[offset..login_end])
        .map_err(|_| error!(UserDataError::DeserializationError))?
        .to_string();
    offset = login_end;

    // 2. id (u64)
    if data.len() < offset + 8 {
        return Err(error!(UserDataError::DeserializationError));
    }
    let id = u64::from_le_bytes(data[offset..offset + 8].try_into().unwrap());
    offset += 8;

    // 3. pubkey (32 –±–∞–π—Ç–∞)
    if data.len() < offset + 32 {
        return Err(error!(UserDataError::DeserializationError));
    }
    let pubkey = Pubkey::new_from_array(data[offset..offset + 32].try_into().unwrap());
    offset += 32;

    // 4. status (u32)
    if data.len() < offset + 4 {
        return Err(error!(UserDataError::DeserializationError));
    }
    let status = u32::from_le_bytes(data[offset..offset + 4].try_into().unwrap());

    Ok(UserByLogin {
        login,
        id,
        pubkey,
        status,
    })
}




/// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
/// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
/// –†–ê–ë–û–¢–ê –° user_counter_pda
/// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
/// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
///


/// –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —Å–∏–¥–æ–≤ PDA-—Å—á—ë—Ç—á–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
pub const USER_COUNTER_SEED: &str = "user_counter";


/// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
/// –ß—Ç–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ PDA
/// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
/// 
pub fn read_user_counter_pda<'info>(
    counter_pda: &AccountInfo<'info>, // –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
    program_id: &Pubkey,              // ID —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
) -> Result<u64> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π PDA —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–∏–¥—É
    let seeds: &[&[u8]] = &[USER_COUNTER_SEED.as_bytes()];
    let (expected_pda, _) = Pubkey::find_program_address(seeds, program_id);
    require!(counter_pda.key == &expected_pda, ErrorCode::InvalidPdaAddress);

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    let raw = safe_read_pda(counter_pda);
    if raw.len() != 8 {
        return Err(error!(ErrorCode::EmptyPdaData)); // –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º 8 –±–∞–π—Ç –≤ u64
    let value = u64::from_le_bytes(raw.try_into().map_err(|_| ErrorCode::DeserializationError)?);
    Ok(value)
}

/// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
/// –ó–∞–ø–∏—Å—å –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ –≤ PDA
/// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
pub fn write_user_counter_pda<'info>(
    counter_pda: &AccountInfo<'info>,
    program_id: &Pubkey,
    value: u64,
) -> Result<()> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å PDA
    let seeds: &[&[u8]] = &[USER_COUNTER_SEED.as_bytes()];
    let (expected_pda, _) = Pubkey::find_program_address(seeds, program_id);
    require!(counter_pda.key == &expected_pda, ErrorCode::InvalidPdaAddress);

    // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º u64 –≤ 8 –±–∞–π—Ç
    let bytes = value.to_le_bytes().to_vec();

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ PDA
    write_to_pda(counter_pda, &bytes)
}

/// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
/// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PDA —Å—á—ë—Ç—á–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–∞—è)
/// ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
///
/// —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ã–∑–æ–≤–∞ 
#[derive(Accounts)]
pub struct InitUserCounter<'info> {
    /// –¢–æ—Ç, –∫—Ç–æ –ø–ª–∞—Ç–∏—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ PDA
    /// CHECK: –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è Anchor —á–µ—Ä–µ–∑ #[account(signer)]
    #[account(mut, signer)]
    pub signer: AccountInfo<'info>,

    /// –ê–∫–∫–∞—É–Ω—Ç-—Å—á—ë—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å PDA —Å —Å–∏–¥–æ–º ["user_counter"]
    /// CHECK: –≠—Ç–æ PDA, –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –≤ –∫–æ–¥–µ –≤—Ä—É—á–Ω—É—é –ø–æ —Å–∏–¥-–∑–Ω–∞—á–µ–Ω–∏—é
    #[account(mut)]
    pub counter_pda: AccountInfo<'info>,

    /// –°–∏—Å—Ç–µ–º–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ Solana
    pub system_program: Program<'info, System>,
}
/// –∏ —Ñ—É–Ω–∫—Ü–∏—è 
pub fn initialize_user_counter<'info>(
    counter_pda: &AccountInfo<'info>,
    signer: &AccountInfo<'info>,         // –ø–ª–∞—Ç–∏—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ
    system_program: &AccountInfo<'info>, // —Å–∏—Å—Ç–µ–º–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
    program_id: &Pubkey,
) -> Result<()> {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDA –∏–∑ —Å–∏–¥–æ–≤
    let seeds: &[&[u8]] = &[USER_COUNTER_SEED.as_bytes()];
    let (expected_pda, bump) = Pubkey::find_program_address(seeds, program_id);
    require!(counter_pda.key == &expected_pda, ErrorCode::InvalidPdaAddress);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –µ—Å–ª–∏ PDA —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º —Å –æ—à–∏–±–∫–æ–π
    if counter_pda.owner != &Pubkey::default() {
        msg!("PDA –°–æ —Å—á—ë—Ç—á–∏–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞!");
        return Err(error!(ErrorCode::SystemAlreadyInitialized));
    }

    // –ü–æ–ª–Ω—ã–µ —Å–∏–¥—ã
    let full_seeds: &[&[u8]] = &[USER_COUNTER_SEED.as_bytes(), &[bump]];

    // –°–æ–∑–¥–∞—ë–º PDA –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—É–¥–∞ 0
    create_and_write_pda(
        counter_pda,
        signer,
        system_program,
        program_id,
        full_seeds,
        0u64.to_le_bytes().to_vec(), // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º 0
        8,                           // —Ä–∞–∑–º–µ—Ä ‚Äî 8 –±–∞–π—Ç (u64)
    )?;
    msg!("PDA –°–æ —Å—á—ë—Ç—á–∏–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω");
    Ok(())
}












///----------------------------------------------------------------------------------------------------------
///   –°–æ–∑–¥–∞–Ω–∏–µ —á—Ç–µ–Ω–∏–µ  PDA
///----------------------------------------------------------------------------------------------------------

/// –°–æ–∑–¥–∞—ë—Ç PDA –∞–∫–∫–∞—É–Ω—Ç (–µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç), –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –Ω–µ–≥–æ –º–∞—Å—Å–∏–≤ –±–∞–π—Ç.
///
/// –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
/// - `pda_account`: –∞–∫–∫–∞—É–Ω—Ç, –∫—É–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º
/// - `signer`: –∫—Ç–æ –ø–ª–∞—Ç–∏—Ç –∑–∞ —Å–æ–∑–¥–∞–Ω–∏–µ (–æ–±—ã—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
/// - `program_id`: –∞–¥—Ä–µ—Å —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
/// - `seeds`: —Å–ª–∞–π—Å —Å–∏–¥–æ–≤, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Å–æ–∑–¥–∞–≤–∞–ª—Å—è PDA
/// - `data`: –±–∞–π—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏
/// - `space`: –∂–µ–ª–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞
pub fn create_and_write_pda<'info>(
    pda_account: &AccountInfo<'info>,
    signer: &AccountInfo<'info>,
    system_program: &AccountInfo<'info>,
    program_id: &Pubkey,
    seeds: &[&[u8]],
    data: Vec<u8>,
    space: u64,
) -> Result<()> {
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–Ω –ª–∏ –∞–∫–∫–∞—É–Ω—Ç (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî owner = default)
    if pda_account.owner == &Pubkey::default() {
        msg!("–°–æ–∑–¥–∞—ë–º PDA —Å —Ä–∞–∑–º–µ—Ä–æ–º {} –±–∞–π—Ç", space);

        let space = space; //+ 128; // –î–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∑–∞–ø–∞—Å –ø–æ–¥ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∞—Ä–µ–Ω–¥–Ω—É—é –ø–ª–∞—Ç—É
        let lamports = Rent::get()?.minimum_balance(space as usize);

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
        let create_instr = system_instruction::create_account(
            signer.key,
            pda_account.key,
            lamports,
            space,
            program_id,
        );

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å –ø–æ–¥–ø–∏—Å—å—é –æ—Ç PDA
        invoke_signed(
            &create_instr,
            &[
                signer.clone(),
                pda_account.clone(),
                system_program.clone(),
            ],
            &[&seeds],
        )?;
    }

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // 2. –ü–∏—à–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∞–∫–∫–∞—É–Ω—Ç
    let mut account_data = pda_account.try_borrow_mut_data()?;

    let copy_len = std::cmp::min(account_data.len(), data.len());
    account_data[..copy_len].copy_from_slice(&data[..copy_len]);

    // –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –¥–æ–ø–æ–ª–Ω–∏—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –Ω—É–ª—è–º–∏ ‚Äî —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π:
    // for i in copy_len..account_data.len() {
    //     account_data[i] = 0;
    // }

    msg!("–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ {} –±–∞–π—Ç –≤ PDA", copy_len);
    Ok(())
}




/// –°–æ–∑–¥–∞—ë—Ç PDA –∞–∫–∫–∞—É–Ω—Ç (–µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç).
///
/// ‚ö†Ô∏è –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –æ—à–∏–±–∫–∞.
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.
///
/// –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
/// - `pda_account`: –∞–∫–∫–∞—É–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏–º —Å–æ–∑–¥–∞—Ç—å (PDA)
/// - `signer`: –∫—Ç–æ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ (–æ–±—ã—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
/// - `system_program`: —Å–∏—Å—Ç–µ–º–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ (`111...111`)
/// - `program_id`: –∞–¥—Ä–µ—Å —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ PDA)
/// - `seeds`: –º–∞—Å—Å–∏–≤ —Å–∏–¥–æ–≤, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –≤—ã—á–∏—Å–ª—è–ª—Å—è PDA
/// - `space`: –∂–µ–ª–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ –±–∞–π—Ç–∞—Ö (—Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã—Ö, –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö)
pub fn create_pda<'info>(
    pda_account: &AccountInfo<'info>,
    signer: &AccountInfo<'info>,
    system_program: &AccountInfo<'info>,
    program_id: &Pubkey,
    seeds: &[&[u8]],
    space: u64,
) -> Result<()> {
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫–∫–∞—É–Ω—Ç
    if pda_account.owner != &Pubkey::default() {
        // –ï—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü –Ω–µ —Ä–∞–≤–µ–Ω Pubkey::default, –∑–Ω–∞—á–∏—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º
        return Err(error!(ErrorCode::PdaAlreadyExists));
    }

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // 2. –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –±—É–¥–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å PDA
    msg!("–°–æ–∑–¥–∞—ë–º PDA-–∞–∫–∫–∞—É–Ω—Ç –Ω–∞ {} –±–∞–π—Ç", space);

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –ø–æ–¥ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ Solana (–ø—Ä–∏–º–µ—Ä–Ω–æ 128 –±–∞–π—Ç)
    let full_space = space + 128;

    // –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –∞—Ä–µ–Ω–¥—ã (—á—Ç–æ–±—ã –∞–∫–∫–∞—É–Ω—Ç –Ω–µ —É–¥–∞–ª–∏–ª–∏)
    let lamports = Rent::get()?.minimum_balance(full_space as usize);

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // 3. –°–æ–∑–¥–∞—ë–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é system_program –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞
    let create_instr = system_instruction::create_account(
        signer.key,         // –æ—Ç –∏–º–µ–Ω–∏ –∫–æ–≥–æ
        pda_account.key,    // –¥–ª—è –∫–∞–∫–æ–≥–æ PDA
        lamports,           // —Å–∫–æ–ª—å–∫–æ –ª–∞–º–ø–æ—Ä—Ç–æ–≤ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏
        full_space,         // —Å–∫–æ–ª—å–∫–æ –±–∞–π—Ç –≤—ã–¥–µ–ª–∏—Ç—å
        program_id,         // –∫—Ç–æ –±—É–¥–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–µ–º PDA
    );

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // 4. –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é —Å –ø–æ–¥–ø–∏—Å—å—é PDA (—á–µ—Ä–µ–∑ —Å–∏–¥—ã)
    invoke_signed(
        &create_instr,
        &[
            signer.clone(),
            pda_account.clone(),
            system_program.clone(),
        ],
        &[&seeds], // PDA —Å–∏–¥—ã ‚Üí –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    )?;

    Ok(())
}

/// –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –º–∞—Å—Å–∏–≤ –±–∞–π—Ç –≤ PDA –∞–∫–∫–∞—É–Ω—Ç (–≤ –Ω–∞—á–∞–ª–æ data-—Å–µ–∫—Ü–∏–∏).
///
/// ‚ö†Ô∏è –£–±–µ–¥–∏—Å—å, —á—Ç–æ PDA –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –∫–∞–∫ `#[account(mut)]`
/// ‚ö†Ô∏è –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ–∑–¥–∞—ë—Ç, —Ç–æ–ª—å–∫–æ –ø–∏—à–µ—Ç.
///
/// –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
/// - `pda_account`: –∞–∫–∫–∞—É–Ω—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –ø–∏—à–µ–º (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å mut)
/// - `data`: –±–∏–Ω–∞—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å
pub fn write_to_pda<'info>(
    pda_account: &AccountInfo<'info>,
    data: &[u8],
) -> Result<()> {
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // 1. –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º PDA (–Ω–∞ –∑–∞–ø–∏—Å—å)
    let mut account_data = pda_account.try_borrow_mut_data()?;

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // 2. –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –±–∞–π—Ç —Ä–µ–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å
    // (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ data –¥–ª–∏–Ω–Ω–µ–µ, —á–µ–º –≤—ã–¥–µ–ª–µ–Ω–æ –º–µ—Å—Ç–æ)
    let copy_len = std::cmp::min(account_data.len(), data.len());

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // 3. –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∞–∫–∫–∞—É–Ω—Ç (—Å —Å–∞–º–æ–≥–æ –Ω–∞—á–∞–ª–∞)
    account_data[..copy_len].copy_from_slice(&data[..copy_len]);

    // –õ–æ–≥–∏—Ä—É–µ–º, —Å–∫–æ–ª—å–∫–æ –±–∞–π—Ç –∑–∞–ø–∏—Å–∞–Ω–æ
    msg!("–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ {} –±–∞–π—Ç –≤ PDA", copy_len);

    Ok(())
}










/// ------------------------------------------------------------------------
/// safe_read_pda ‚Äí ¬´–±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ PDA¬ª
/// ------------------------------------------------------------------------
///
/// * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç:   —Å—Å—ã–ª–∫—É –Ω–∞ `AccountInfo<'info>` PDA-–∞–∫–∫–∞—É–Ω—Ç–∞.
/// * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:  `Vec<u8>` —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.  
///                –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç –∏–ª–∏ –µ–≥–æ –¥–∞–Ω–Ω—ã–µ –ø—É—Å—Ç—ã ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è `Vec::new()`
///                –¥–ª–∏–Ω–æ–π 0 –±–∞–π—Ç.
///
/// –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
/// 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–∫–∫–∞—É–Ω—Ç **–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω**: —É –Ω–µ-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
///    owner = Pubkey::default(). –ï—Å–ª–∏ owner –Ω—É–ª–µ–≤–æ–π ‚Äî —Å—Ä–∞–∑—É –æ—Ç–¥–∞—ë–º –ø—É—Å—Ç–æ–π –≤–µ–∫—Ç–æ—Ä.
/// 2. –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ –±—É—Ñ–µ—Ä–∞ == 0 (Anchor helper `data_is_empty()`), —Ç–æ–∂–µ –æ—Ç–¥–∞—ë–º –ø—É—Å—Ç–æ–π.
/// 3. –ü—ã—Ç–∞–µ–º—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ (`try_borrow_data`) –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –¥–∞–Ω–Ω—ã–µ.
///    - –£—Å–ø–µ—Ö ‚Üí –∫–æ–ø–∏—Ä—É–µ–º –∏—Ö –≤ Vec –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º.
///    - –û—à–∏–±–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–æ–Ω—Ñ–ª–∏–∫—Ç borrow) ‚Üí –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π Vec.
///
/// –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è 
/// let raw_bytes = safe_read_pda(&ctx.accounts.readonly_pda);
/// require!(!raw_bytes.is_empty(), ErrorCode::EmptyPdaData);
/// msg!("–†–∞–∑–º–µ—Ä —Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {}", raw_bytes.len());
/// ------------------------------------------------------------------------
pub fn safe_read_pda<'info>(pda_account: &AccountInfo<'info>) -> Vec<u8> {
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // 1) –ê–∫–∫–∞—É–Ω—Ç –ù*–ï* –°–£–©–ï–°–¢–í–£–ï–¢ –∏–ª–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:
    // owner == Pubkey::default() (–≤ Solana –Ω—É–ª–µ–≤–æ–π owner —É –ø—É—Å—Ç–æ–≥–æ —Å—á—ë—Ç–∞)
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if pda_account.owner == &Pubkey::default() {
        msg!("safe_read_pda: –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ‚Äí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤");
        return Vec::new(); // []
    }

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // 2) –£ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö (–¥–ª–∏–Ω–∞ 0) ‚Äî —Ç–æ–∂–µ —Å—á–∏—Ç–∞–µ–º ¬´–ø—É—Å—Ç—ã–º¬ª
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if pda_account.data_is_empty() {
        msg!("safe_read_pda: —É –∞–∫–∫–∞—É–Ω—Ç–∞ data_len == 0 ‚Äí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤");
        return Vec::new();
    }

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // 3) –ü—ã—Ç–∞–µ–º—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–±—Ä–∞—Ç—å –±—É—Ñ–µ—Ä –¥–∞–Ω–Ω—ã—Ö; –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    match pda_account.try_borrow_data() {
        Ok(data_ref) => {
            // to_vec() –∫–æ–ø–∏—Ä—É–µ—Ç bytes ‚Üí Vec<u8>, —á—Ç–æ–±—ã –¥–∞–ª—å—à–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ borrow-–ª–∏—Ñ–∞
            data_ref.to_vec()
        }
        Err(e) => {
            // –û—à–∏–±–∫–∞ –ø—Ä–∏ borrow (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –º—É—Ç–∞–±–µ–ª—å–Ω–æ–µ –∑–∞–∏–º—Å—Ç–≤–æ–≤–∞–Ω–∏–µ)
            msg!("safe_read_pda: –æ—à–∏–±–∫–∞ borrow_data ({:?}) ‚Äí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤", e);
            Vec::new()
        }
    }
}
