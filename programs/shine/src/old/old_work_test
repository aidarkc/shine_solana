// Импортируем все нужные типы и макросы из Anchor
use anchor_lang::prelude::*;

// Указываем ID программы, это должен быть ID, под которым она задеплоена
declare_id!("BmCgGmQbSjkE6Zg8WAwhxDMNHiTknMYqTF4ZVMrPdTpz");

// Объявляем саму программу и её функции
#[program]
pub mod hello_solana {
    use super::*;

    // Простая функция, которая выводит сообщение — оставим её как есть
    pub fn say_hello(_ctx: Context<SayHello>) -> Result<()> {
        msg!("Привет, Solana от Айдара!"); // Выводим лог в консоль
        Ok(())
    }

    // Новая функция — регистрирует пользователя по логину и публичному ключу
    pub fn register_user(ctx: Context<RegisterUser>, login: String, pubkey: Pubkey) -> Result<()> {
        // Проверяем, что длина логина не превышает 32 символа
        if login.len() > 32 {
            return err!(ErrorCode::InvalidLogin); // Возвращаем ошибку
        }

        // Проверяем, что логин содержит только a-z, 0-9 и '_'
        for c in login.chars() {
            if !(c.is_ascii_lowercase() || c.is_ascii_digit() || c == '_') {
                return err!(ErrorCode::InvalidLogin); // Ошибка, если недопустимый символ
            }
        }

        let user = &mut ctx.accounts.user_data; // Получаем доступ к PDA-аккаунту пользователя
        user.login = login.clone(); // Сохраняем логин
        user.pubkey = pubkey;       // Сохраняем публичный ключ

        msg!("Пользователь '{}' зарегистрирован", login); // Печатаем сообщение
        Ok(())
    }
}

// Структура аккаунтов для say_hello
#[derive(Accounts)]
pub struct SayHello<'info> {
    #[account(mut)] // Подписант может изменяться
    pub signer: Signer<'info>, // Подписант транзакции
}

// Структура аккаунтов для register_user
#[derive(Accounts)]
#[instruction(login: String)] // Указываем, что login участвует в PDA
pub struct RegisterUser<'info> {
    #[account(mut)] // Подписант — тот, кто вызывает регистрацию
    pub signer: Signer<'info>,

    // PDA-аккаунт пользователя
    #[account(
        init, // Если аккаунт не существует, создаём его
        payer = signer, // За создание платит подписант
        space = 8 + 4 + 32 + 32 + 100, // 8 байт для Anchor-дисриминатора, 32 + 4 байта логин, 32 байта ключ
        seeds = [b"user", login.as_bytes()], // Строим PDA из сидов
        bump // Автоматически берём bump (уникальный байт для валидности PDA)
    )]
    pub user_data: Account<'info, UserData>, // Аккаунт, в котором храним логин и ключ

    pub system_program: Program<'info, System>, // Системная программа Solana, нужна для инициализации PDA
}

// Структура, которая хранит данные пользователя
#[account]
pub struct UserData {
    pub login: String, // Логин пользователя (до 32 символов)
    pub pubkey: Pubkey, // Публичный ключ пользователя
}

// Список возможных ошибок, которые мы можем возвращать
#[error_code]
pub enum ErrorCode {
    #[msg("Неверный логин: допускаются только маленькие буквы, цифры и _")]
    InvalidLogin,
}
