


// todo —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ö–æ–∞–º –Ω–µ –Ω—É–∂–Ω—ã–π





/// –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∑–æ–≤–∞ test_utils
#[derive(Accounts)]
pub struct TestContext<'info> {
    /// –ü–æ–¥–ø–∏—Å–∞–Ω—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è Anchor
    /// CHECK: –¢–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è. –ù–∏–∫–∞–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.
    #[account(signer)]
    pub signer: AccountInfo<'info>,

    /// –ê–∫–∫–∞—É–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
    /// CHECK: –≠—Ç–æ PDA, —á—å—è –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ seeds –∏ signer
    #[account(mut)]
    pub writable_pda: AccountInfo<'info>,

    /// –ê–∫–∫–∞—É–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —á–∏—Ç–∞—Ç—å
    /// CHECK: –¢–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è. –ù–∏–∫–∞–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.
    pub readonly_pda: AccountInfo<'info>,

    /// –°–∏—Å—Ç–µ–º–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ (–Ω—É–∂–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è)/// 
    /// CHECK: –¢–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è. –ù–∏–∫–∞–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∑–∞–ø–∏—Å–∏ –Ω–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è.
    pub system_program: Program<'info, System>,}

/// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
pub fn test(
    ctx: Context<TestContext>,     // –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
    extra_pubkey: Pubkey,          // –ø—Ä–æ—Å—Ç–æ –∫–ª—é—á (–Ω–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º—ã–π)
    number: u64,                   // —á–∏—Å–ª–æ
    note: String,                  // —Å—Ç—Ä–æ–∫–∞
    str_array: Vec<String>,        // –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª–∏–Ω–Ω—ã
) -> Result<()> {
    // –ü–µ—á–∞—Ç–∞–µ–º –≤—Å—ë –≤ –ª–æ–≥
    msg!("Signer: {:?}", ctx.accounts.signer.key);
    msg!("Writable PDA: {:?}", ctx.accounts.writable_pda.key);
    msg!("Readonly PDA: {:?}", ctx.accounts.readonly_pda.key);
    msg!("Extra pubkey: {:?}", extra_pubkey);
    msg!("Number: {}", number);
    msg!("Note: {}", note);
    msg!("Array length: {}", str_array.len());
    for (i, s) in str_array.iter().enumerate() {
        msg!("str_array[{}] = {}", i, s);
    }



    // ---  –ü—Ä–∏–º–µ—Ä —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç—É

    let raw_bytes = safe_read_pda(&ctx.accounts.readonly_pda);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∞—Å—Å–∏–≤ –Ω–µ –ø—É—Å—Ç–æ–π
    require!(!raw_bytes.is_empty(), ErrorCode::EmptyPdaData);
    msg!("–†–∞–∑–º–µ—Ä —Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {}", raw_bytes.len());

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // –ü—Ä–æ–±—É–µ–º –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
    let user = deserialize_my_user(&*raw_bytes)?;

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // –í—ã–≤–æ–¥–∏–º –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    msg!("‚úÖ –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –ª–æ–≥–∏–Ω: {}", user.login);

    // –ü–µ—á–∞—Ç–∞–µ–º –º–∞—Å—Å–∏–≤ –ø–æ –±–∞–π—Ç–∞–º: [00 2A FF ...]
    let mut output = String::new();
    for (i, byte) in raw_bytes.iter().enumerate() {
        use std::fmt::Write;

        if i % 16 == 0 {
            // –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∞–¥—Ä–µ—Å–æ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            let _ = write!(output, "\n{:04X}: ", i);
        }
        let _ = write!(output, "{:02X} ", byte);
    }
    msg!("üì¶ –î–∞–Ω–Ω—ã–µ PDA:{}", output);








    // --- –ø—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ UserStruct –µ–≥–æ –∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏    
    // --- –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç MyUserStruct
    let user_struct = UserStruct {
        user_id: number,                               // –ª—é–±–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        login: note.clone(),                        // –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å note.clone() –∏–ª–∏ —Å—Ç—Ä–æ–∫—É –∏–∑ –º–∞—Å—Å–∏–≤–∞
        pubkey: ctx.accounts.signer.key().clone(),  // –Ω–∞–ø—Ä–∏–º–µ—Ä, signer
    };

    // --- –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ –º–∞—Å—Å–∏–≤ –±–∞–π—Ç
    let serialized_bytes = serialize_my_user(&user_struct);



    // ---  –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è PDA –∏ –∑–∞–ø–∏—Å–∏ –≤ –Ω–µ–≥–æ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–∞—Å—Å–∏–≤–∞
    let seed_string = format!("{}{}", USER_SEED_PREFIX, note);
    let seed_bytes = seed_string.as_bytes();


    // –ü–æ–∏—Å–∫ PDA
    let seeds: &[&[u8]] = &[seed_bytes];
    let (expected_pda, bump) = Pubkey::find_program_address(seeds, ctx.program_id);
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ PDA
    require!(ctx.accounts.writable_pda.key == &expected_pda, ErrorCode::InvalidPdaAddress);

    // –ü–æ–ª–Ω—ã–µ —Å–∏–¥—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    let full_seeds: &[&[u8]] = &[seed_bytes, &[bump]];

    msg!("serialized_bytes.len() as u64 {}", serialized_bytes.len() as u64);
    // –ó–∞–ø–∏—Å—å
    create_and_write_pda(
        &ctx.accounts.writable_pda,
        &ctx.accounts.signer,
        &ctx.accounts.system_program,
        ctx.program_id,
        full_seeds,
        serialized_bytes.clone(),
        serialized_bytes.len() as u64,
    )?;


    Ok(())
}




///---------------------------------------------------------------------------------
///
///   –°–¢–†–£–ö–¢–£–†–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò –ï–Å –°–ï–†–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –î–ï–°–ï–†–ò–ê–õ–ò–ó–ê–¶–ò–Ø
///
/// --------------------------------------------------------------------------------
 
/// –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
pub struct UserStruct {
    //pub format_type: u32,   // 4 –±–∞–π—Ç–∞        –Ω–µ —Ö—Ä–∞–Ω–∏–º
    pub user_id: u64,       // 8 –±–∞–π—Ç
    pub login: String,      // —Å–Ω–∞—á–∞–ª–∞ –¥–ª–∏–Ω–∞, –ø–æ—Ç–æ–º –±–∞–π—Ç—ã
    pub pubkey: Pubkey,     // 32 –±–∞–π—Ç–∞
}

///    ------------  –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è -----------
// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

// let user_bytes = serialize_my_user(&some_user);
// match deserialize_my_user(&user_bytes) {
// Ok(user) => msg!("–î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω –ª–æ–≥–∏–Ω: {}", user.login),
// Err(e) => msg!("–û—à–∏–±–∫–∞: {}", e),
// }

/// –ú–µ—Ç–æ–¥ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ Vec<u8>
/// let user = MyUserStruct {
///     format_type: 1,
///     user_id: 42,
///     login: String::from("sol_user"),
///     pubkey: Pubkey::new_unique(),
/// };
/// 
/// let bytes = serialize_my_user(&user);
/// msg!("–°–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ {} –±–∞–π—Ç: {:?}", bytes.len(), bytes);
pub fn serialize_my_user(user: &UserStruct) -> Vec<u8> {
    let mut result = Vec::new();

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // 1. format_type (4 –±–∞–π—Ç–∞)
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    result.extend_from_slice(&1u32.to_le_bytes());
    //result.extend_from_slice(&user.format_type.to_le_bytes());  –Ω–µ —Ö—Ä–∞–Ω–∏–º

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // 2. user_id (8 –±–∞–π—Ç)
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    result.extend_from_slice(&user.user_id.to_le_bytes());

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // 3. login: —Å–Ω–∞—á–∞–ª–∞ –¥–ª–∏–Ω–∞ (u8), –∑–∞—Ç–µ–º –±–∞–π—Ç—ã
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    let login_bytes = user.login.as_bytes();
    let login_len = login_bytes.len();

    // –ï—Å–ª–∏ –ª–æ–≥–∏–Ω –¥–ª–∏–Ω–Ω–µ–µ 255 —Å–∏–º–≤–æ–ª–æ–≤ ‚Äî –æ—à–∏–±–∫–∞ (–∏–ª–∏ –æ–±—Ä–µ–∂–µ–º)
    let login_len_u8 = login_len.min(255) as u8;

    result.push(login_len_u8); // –¥–ª–∏–Ω–∞
    result.extend_from_slice(&login_bytes[..login_len_u8 as usize]); // —Å—Ç—Ä–æ–∫–∞

    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    // 4. Pubkey (32 –±–∞–π—Ç–∞)
    // ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    result.extend_from_slice(user.pubkey.as_ref());

    result
}
///    ------------  –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è -----------

/// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –Ω—É–∂–Ω—É—é –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é
pub fn deserialize_my_user(data: &[u8]) -> Result<UserStruct> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –±–∞–π—Ç–∞—Ö —Ö–æ—Ç—è –±—ã 4 –±–∞–π—Ç–∞ –ø–æ–¥ —Ñ–æ—Ä–º–∞—Ç
    if data.len() < 4 {
        return Err(error!(ErrorCode::DeserializationError));
    }

    // –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ 4 –±–∞–π—Ç–∞ ‚Äî —Ç–∏–ø —Ñ–æ—Ä–º–∞—Ç–∞
    let format_type = u32::from_le_bytes(data[0..4].try_into().map_err(|_| ErrorCode::DeserializationError)?);

    // –í–µ—Ç–≤–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø—É —Ñ–æ—Ä–º–∞—Ç–∞
    match format_type {
        1 => deserialize_format_1(data),
        // 2 => deserialize_format_2(data),
        // 3 => ...
        _ => Err(error!(ErrorCode::UnsupportedFormat)),
    }
}

/// –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞ 1:
/// [0..4]  ‚Üí format_type: u32
/// [4..12] ‚Üí user_id: u64
/// [12..13] ‚Üí –¥–ª–∏–Ω–∞ –ª–æ–≥–∏–Ω–∞: u8
/// [13..(13+len)] ‚Üí –ª–æ–≥–∏–Ω
/// [..] ‚Üí 32 –±–∞–π—Ç–∞ pubkey
pub fn deserialize_format_1(data: &[u8]) -> Result<UserStruct> {
    // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å—ë –≤ –æ–¥–Ω—É try-–±–ª–æ–∫, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å –ª—é–±—ã–µ –æ—à–∏–±–∫–∏
    let result = (|| {
        if data.len() < 4 + 8 + 1 + 32 {
            return Err(ErrorCode::DeserializationError);
        }

        //let format_type = u32::from_le_bytes(data[0..4].try_into().unwrap());  –Ω–µ —Ö—Ä–∞–Ω–∏–º
        let user_id = u64::from_le_bytes(data[4..12].try_into().unwrap());

        let login_len = data[12] as usize;
        let login_start = 13;
        let login_end = login_start + login_len;

        if data.len() < login_end + 32 {
            return Err(ErrorCode::DeserializationError);
        }

        let login_bytes = &data[login_start..login_end];
        let login = std::str::from_utf8(login_bytes)
            .map_err(|_| ErrorCode::DeserializationError)?
            .to_string();

        let pubkey_start = login_end;
        let pubkey_end = pubkey_start + 32;
        let pubkey = Pubkey::try_from(&data[pubkey_start..pubkey_end])
            .map_err(|_| ErrorCode::DeserializationError)?;


        Ok(UserStruct {
            user_id,
            login,
            pubkey,
        })
    })();

    // –û–±–µ—Ä–Ω—ë–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –ª—é–±–∞—è –∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–π —É–ø–∞–ª–∞
    result.map_err(|_| error!(ErrorCode::DeserializationError))
}


